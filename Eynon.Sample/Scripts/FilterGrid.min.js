var com = com || {}; com.Eynon = com.Eynon || {}, com.Eynon.SessionMode = { Browser: 1, Window: 2 }, com.Eynon.FilterGrid = function (t) { var e = this; this.container = t, this.filterWindows = {}, this.activeFilterWindow = null, this.filterTray = null, this.activeFilters = {}, this.activeSorts = [], this.selected = [], this.deferUpdate = !1, this.newFilter = !1, this.columnTitles = [], this.HiddenColumns = [], this.HiddenFilters = [], this.ColumnFilters = [], this.AdditionalFilters = [], this.SessionMode = com.Eynon.SessionMode.Browser, this.columnWindow = null, this.guid = null, this.route = "", this.pages = 1, this.page = 1, this.total = 0, this.pageSize = 25, this.refresh = null, this.refreshInterval = null, this.allowSelect = !1, this.Summary = !1, this.UpdateTimeout = null, this.ResultsLoaded = !1, this.ActiveXHR = null, this.LoadImmediate = !1, this.SettingsElement = null, this.FilterID = "", this.Initialized = !1, this.DoCheckSavedState = null, this.Initialize = function () { this.container.attr("data-filter-holder") && (this.filterTray = $("#" + this.container.attr("data-filter-holder")), this.filterTray.addClass("filter-tray"), this.container.on("loadFilters", this.ApplyAllFilters), this.container.on("initializeFilters", this.LoadFilter), this.container.on("clearFilters", this.ClearFilters), this.container.on("setHiddenFilters", this.SetHiddenFilters), this.container.on("loadSavedFilter", this.SetFilters), this.container.on("printGrid", this.Print), this.container.on("showHideColumns", this.ShowHideColumns)), this.FilterID = this.container.attr("data-filter-id"), this.pages = parseInt(this.container.attr("data-pages")), this.page = parseInt(this.container.attr("data-page")), this.route = this.container.attr("data-route"), this.results = parseInt(this.container.attr("data-results")), this.total = parseInt(this.container.attr("data-total")), this.pageSize = parseInt(this.container.attr("data-pageSize")), this.refresh = parseInt(this.container.attr("data-refresh")), this.allowSelect = "true" == this.container.attr("data-selectable"), this.Summary = "true" == this.container.attr("data-summary"), this.countHolder = this.container.attr("data-count-holder"); var t = this.container.attr("data-settings-element"); this.SettingsElement = void 0 != t ? $(t) : null; var e = this.container.attr("data-check-saved-state"); if (this.DoCheckSavedState = void 0 != e ? e : "true", this.BuildPagination(this.results, this.page, this.pages, this.total), this.Bind(), isNaN(this.refresh) || (this.refreshInterval = setTimeout(this.UpdateResults, 1e3 * this.refresh)), this.LoadDefaultFilters(), this.LoadDefaultSorts(), "true" == this.DoCheckSavedState && this.CheckSavedState(), "true" == this.container.attr("data-load-immediate")) if (this.LoadImmediate = !0, "true" == this.container.attr("data-load-deferred")) { var i = this; setTimeout(function () { i.UpdateResults() }, 200) } else this.UpdateResults(); this.Initialized = !0 }, this.Bind = function () { this.container.on("refreshGrid", this.RefreshResults), this.container.find("th").each(function () { var t = $(this).attr("data-filter"); void 0 !== t && !1 !== t && e.BindFilter($(this)) }), this.container.find(".additional-filter").each(function () { var t = { Field: $(this).attr("data-filter"), Display: $(this).attr("data-filter-name"), Data: "", Type: $(this).attr("data-filter-type"), Container: $(this) }; e.AdditionalFilters.push(t), $(this).attr("data-filter-show") && JSON.parse($(this).attr("data-filter-show")) && e.ShowAdditionalFilterWindow(t.Container, t.Display, t.Field, t.Type) }), e.BuildAdditionalFilterSelect(), this.BindRows() }, this.GetSavedStateName = function () { return e.FilterID + ":" + e.route }, this.CheckSavedState = function () { var t; (com.Eynon.SessionMode, t = e.SessionMode == com.Eynon.SessionMode.Browser ? window.localStorage.getItem(e.GetSavedStateName()) : window.sessionStorage.getItem(e.GetSavedStateName())) && ((t = JSON.parse(t)).Data.SetPage = t.Data.Page, e.container.trigger("loadSavedFilter", t)) }, this.CreateState = function (t) { e.SessionMode == com.Eynon.SessionMode.Browser ? window.localStorage.setItem(e.GetSavedStateName(), JSON.stringify(t)) : window.sessionStorage.setItem(e.GetSavedStateName(), JSON.stringify(t)) }, this.GenerateGUID = function () { function t() { return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1) } return t() + t() + "-" + t() + "-" + t() + "-" + t() + "-" + t() + t() + t() }, this.BindRows = function () { this.container.find("tbody > tr").each(function () { $(this).on("click", function () { e.container.trigger("item-selected", this) }) }) }, this.BuildAdditionalFilterSelect = function () { if (null != e.filterTray) { var t = $("<div></div>").addClass("additional-filter-select"), i = $("<select></select>").appendTo(t); i.append($('<option value="0">- Add Filter -</option>')); for (var a in e.AdditionalFilters) $("<option></option>").text(e.AdditionalFilters[a].Field).appendTo(i); for (var a in e.ColumnFilters) $("<option></option>").text(e.ColumnFilters[a].Field).appendTo(i); t.insertBefore(e.filterTray), i.on("change", e.AddSelectFilter) } }, this.GetAdditionalFilter = function (t) { for (var i in e.AdditionalFilters) if (e.AdditionalFilters[i].Field == t) return e.AdditionalFilters[i]; return null }, this.GetColumnFilter = function (t) { for (var i in e.ColumnFilters) if (e.ColumnFilters[i].Field == t) return e.ColumnFilters[i]; return null }, this.AddSelectFilter = function (t) { var i = $(this), a = i.val(); i.val(0); var n = e.GetAdditionalFilter(a); if (null != n) e.ShowAdditionalFilterWindow(n.Container, n.Display, n.Field, n.Type); else { var r = e.GetColumnFilter(a); e.ShowFilterWindow(r.Container) } }, this.BindFilter = function (t) { var i = t.html(), a = $("<div></div>").append(i); t.empty().append(a); var n = !0; if (t.attr("data-disable-sort") && (n = !1), n) { var r = $("<span></span>").addClass("glyphicon glyphicon-sort"), l = $("<span></span>").addClass("sort-number"); a.append(l), a.append(r), r.on("click", this.ApplySort) } var s = !0; if (t.attr("data-disable-filter") && (s = !1), s) { var o = $("<span></span>").addClass("glyphicon glyphicon-filter"); a.append(o), o.on("click", this.OpenFilterWindow); var d = { Field: t.attr("data-filter"), Display: t.attr("data-filter"), Data: "", Type: t.attr("data-type"), Container: o }; e.ColumnFilters.push(d) } }, this.RefreshResults = function () { e.UpdateResults() }, this.GetData = function () { var t = []; return t = (t = t.concat(this.GetVisibleFilters())).concat(this.GetHiddenFilters()), e.BuildData(t) }, this.BuildData = function (t) { return { NewFilter: e.newFilter, Order: e.activeSorts, Filter: t, Page: e.page, PageSize: e.pageSize, HiddenColumns: e.HiddenColumns } }, this.GetVisibleFilters = function () { var t = []; for (var i in e.activeFilters) t.push({ Field: i, Data: JSON.stringify(e.activeFilters[i].Data), Type: e.activeFilters[i].Type }); return t }, this.GetHiddenFilters = function () { var t = []; for (var i in e.HiddenFilters) t.push({ Field: e.HiddenFilters[i].Field, Data: JSON.stringify(e.HiddenFilters[i].Data), Type: e.HiddenFilters[i].Type }); return t }, this.GetStateData = function () { var t = []; return t = t.concat(this.GetVisibleFilters()), e.BuildData(t) }, this.UpdateResults = function () { var t = e.GetData(); e.CreateState({ Data: e.GetStateData() }), e.container.trigger("ApplyFilters", { Data: t }), e.container.find(".pagination .glyphicon-refresh").addClass("spinner"), e.container.find(".pagination .status-text").text("Loading..."), clearTimeout(e.refreshInterval), null != e.ActiveXHR && e.ActiveXHR.abort(), 0 == e.total && e.container.find("td[colspan]").text("Refreshing results..."), e.route = e.container.attr("data-route"), e.ActiveXHR = $.post(e.route, t, function (t) { if (null != t.View && e.container.find("tbody").html(t.View), void 0 != t.Count && void 0 != t.Page && void 0 != t.Total && void 0 != t.Pages && (e.ResultsLoaded = !0, e.page = t.Page, e.pages = t.Pages, e.total = t.Total, e.BuildPagination(t.Count, t.Page, t.Pages, t.Total), e.Summary)) { var i = $("<tr></tr>").addClass("summary"); for (var a in e.columnTitles) { var n = $("<td></td>"); null != t.Summary && null != t.Summary[e.columnTitles[a]] && n.text(t.Summary[e.columnTitles[a]]), i.append(n) } e.container.find("tbody").append(i) } e.BindRows(), $(document).trigger("UpdateFiltertable", e.container), e.container.trigger("UpdateFiltertable"), $(window).trigger("updateResponsive"), e.container.find("tbody td").each(function () { var t = $(this).index(); 0 == t ? $(this).addClass("rowheader") : e.columnTitles[t].length > 0 && $(this).prepend($("<div><.div>").addClass("mobile-title").text(e.columnTitles[t])) }) }).always(function () { e.newFilter = !1, clearTimeout(e.refreshInterval), isNaN(e.refresh) || (e.refreshInterval = setTimeout(e.UpdateResults, 1e3 * e.refresh)) }) }, this.Print = function () { var t = e.GetData(); t.PageSize = 5e5; var i = window.open("/Print"), a = !1; $(i).on("load", function () { a = !0 }); for (var n = "", r = 0; r < e.HiddenColumns.length; r++)n += "hide-column-" + (e.HiddenColumns[r] + 1) + " "; $.post(e.route, t, function (r) { if (null != r.View) { var l = document.title; l = e.container.attr("data-title") || l; var s = $("<h1></h1>").text(l), o = e.container.find("table").clone(); if (o.find("tbody").html(r.View), o.find(".glyphicon,.sort-number").remove(), o.find("a").contents().unwrap(), e.Summary) { var d = $("<tr></tr>").addClass("summary"); for (var c in e.columnTitles) { var u = $("<td></td>"); null != r.Summary && null != r.Summary[e.columnTitles[c]] && u.text(r.Summary[e.columnTitles[c]]), d.append(u) } o.find("tbody").append(d) } var h = []; o.find("th").each(function () { void 0 == $(this).attr("data-filter") && h.push($(this).index()) }), h.sort().reverse(); for (c = 0; c < h.length; c++)o.find("th:nth-child(" + (h[c] + 1) + ")").remove(); var p = $('<div class="filters"></div>'); t.Filter.length > 0 && p.append("Filters: "); for (var c in t.Filter) { var f = t.Filter[c]; p.append('<div class="filter"><span>' + f.Field + ":</span> " + f.Data + "</div>") } i.document.title = l, a ? ($(i.document.body).addClass(n), $(i.document.body).append(s).append(p).append(o)) : $(i).on("load", function () { $(i.document.body).addClass(n), $(i.document.body).append(s).append(p).append(o) }) } }) }, this.BuildPagination = function (t, i, a, n) { isNaN(n) && (n = 0), 1e3 == n && (n = "1000+"); var r = $("<span>Displaying <strong>" + t + "</strong> of <strong>" + n + "</strong> results.</span>"), l = $("<div></div>").addClass("pages"); if (i > 1 && (l.append($('<span class="glyphicon glyphicon-step-backward"></span>').on("click", e.pageLeftMost)), l.append($('<span class="glyphicon glyphicon-arrow-left"></span>').on("click", e.pageLeft))), a > 1) { for (var s = i - 10 < 1 ? 1 : i - 10; s < i; s++)l.append($('<span class="page">' + s + "</span>").on("click", { page: s }, e.setPage)); l.append($("<input />").attr({ type: "number", min: 1, max: a.length, value: s }).addClass("page active").on("keyup", function (t) { var i = $(this).val(); setTimeout(function () { t = { data: { page: i } }, e.setPage(t) }, 500) })); for (s = i + 1; s <= a && s < i + 10; s++)l.append($('<span class="page">' + s + "</span>").on("click", { page: s }, e.setPage)); l.append($('<span class="glyphicon glyphicon-arrow-right"></span>').on("click", e.pageRight)), l.append($('<span class="glyphicon glyphicon-step-forward"></span>').on("click", e.pageRightMost)) } var o = $("<div></div>").addClass("status"); o.append($("<span>Ready.</span>").addClass("status-text")), o.append($("<span></span>").addClass("glyphicon glyphicon-refresh").on("click", e.UpdateResults)), null != e.SettingsElement && o.append($("<span></span>").addClass("glyphicon glyphicon-option-horizontal").on("click", e.ToggleOptions)), e.container.find(".pagination").empty().append(r).append(l).append(o), null != e.countHolder && e.ResultsLoaded && $("#" + e.countHolder).text(n) }, this.ToggleOptions = function () { null != e.SettingsElement && (e.SettingsElement.hasClass("hidden") ? e.SettingsElement.removeClass("hidden") : e.SettingsElement.addClass("hidden")) }, this.HideOptions = function () { null != e.SettingsElement && e.SettingsElement.addClass("hidden") }, this.ShowOptions = function () { null != e.SettingsElement && e.SettingsElement.removeClass("hidden") }, this.ShowOptions = function () { null != e.SettingsElement && e.SettingsElement.removeClass("hidden") }, this.pageLeft = function () { e.page -= 1, e.page < 1 && (e.page = 1), e.UpdateResults() }, this.pageRight = function () { e.page += 1, e.page > e.pages && (e.page = e.pages), e.UpdateResults() }, this.pageLeftMost = function () { e.page = 1, e.UpdateResults() }, this.pageRightMost = function () { e.page = e.pages, e.UpdateResults() }, this.setPage = function (t) { e.page = t.data.page, e.page > e.pages && (e.page = e.pages), e.page < 1 && (e.page = 1), e.UpdateResults() }, this.ShowAllColumns = function () { for (var t = 0; t < e.columnTitles.length; t++)e.ShowColumn(t) }, this.ShowHideColumns = function () { for (var t = e.columnTitles, i = [], a = 0; a < t.length; a++)e.StringEmpty(t[a]) || i.push({ title: t[a], index: a, enabled: !e.IsHiddenColumn(a) }); e.BuildShowHideWindow(i).modal("show") }, this.StringEmpty = function (t) { return null == t || 0 === t.length || !t.trim() }, this.IsHiddenColumn = function (t) { for (var i = 0; i < e.HiddenColumns.length; i++)if (e.HiddenColumns[i] == t) return !0; return !1 }, this.HideColumn = function (t) { e.IsHiddenColumn(t) || e.HiddenColumns.push(t), e.container.addClass("hide-column-" + (t + 1)) }, this.ShowColumn = function (t) { e.container.removeClass("hide-column-" + (t + 1)); for (var i = 0; i < e.HiddenColumns.length; i++)if (e.HiddenColumns[i] == t) return void e.HiddenColumns.splice(i, 1) }, this.BuildShowHideWindow = function (t) { null == e.columnWindow && (e.columnWindow = $('<div class="showHide-window modal fade" tabindex="-1" role="dialog"></div>'), e.columnWindow.append($('<div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4 class="modal-title">Show / Hide Columns</h4></div><div class="modal-body"></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button></div></div></div>'))); var i = $("<div></div>").addClass("column-select"); for (var a in t) { var n = t[a], r = $("<div></div>").addClass("column-select-column").text(n.title); t[a].enabled && r.addClass("column-enabled"), r.on("click", n, e.toggleColumn), i.append(r) } return e.columnWindow.find(".modal-body").empty().append(i), e.columnWindow }, this.toggleColumn = function (t, i) { e.IsHiddenColumn(t.data.index) ? e.ShowColumn(t.data.index) : e.HideColumn(t.data.index), e.ShowHideColumns(); var a = e.GetData(); e.container.trigger("UpdateColumns", { Data: a }), e.CreateState({ Data: a }) }, this.LoadDefaultSorts = function () { var t = []; this.container.find("th").each(function () { var e = $(this).attr("data-filter"); if (void 0 !== e && !1 !== e) { var i = $(this).attr("data-sort"), a = $(this).attr("data-sort-order") || "asc"; void 0 != i && void 0 != a && t.push({ row: $(this), order: a, dir: i }) } }), t.sort(function (t, e) { return t.order > e.order ? -1 : t.order < e.order ? 1 : 0 }); for (var i in t) { var a = t[i].row.find(".glyphicon-sort"), n = t[i].row.attr("data-filter"), r = t[i].row.attr("data-filter-type"); "desc" == t[i].dir ? this.SortDesc(a, n, r) : this.SortAsc(a, n, r) } e.UpdateSortNumbers(), e.LoadImmediate && e.UpdateResults() }, this.ClearSort = function () { this.container.find("th").each(function () { $(this).find(".glyphicon-sort, .glyphicon-sort-by-attributes, .glyphicon-sort-by-attributes-alt").removeClass("glyphicon-sort-by-attributes").removeClass("glyphicon-sort-by-attributes-alt").removeClass("active-filter").addClass("glyphicon-sort"), $(this).find(".sort-number").html("") }), this.activeSorts = [], e.UpdateSortNumbers() }, this.ApplySort = function () { var t = $(this), i = $(t).parent().parent().attr("data-filter"), a = $(t).parent().parent().attr("data-filter-type"), n = e.AddSort(i, a); if (null == n) t.removeClass("glyphicon-sort-by-attributes").removeClass("glyphicon-sort-by-attributes-alt").removeClass("active-filter").addClass("glyphicon-sort"); else { 0 == n ? t.addClass("glyphicon-sort-by-attributes").removeClass("glyphicon-sort-by-attributes-alt").removeClass("glyphicon-sort").addClass("active-filter") : t.removeClass("glyphicon-sort-by-attributes").addClass("glyphicon-sort-by-attributes-alt").removeClass("glyphicon-sort").addClass("active-filter"); e.GetSortIndex(i) } e.UpdateSortNumbers(), e.UpdateResults() }, this.SortAsc = function (t, i, a) { e.AddSortAsc(i, a); t.removeClass("glyphicon-sort-by-attributes-alt").addClass("active-filter").removeClass("glyphicon-sort").addClass("glyphicon-sort-by-attributes") }, this.SortDesc = function (t, i, a) { e.AddSortDesc(i, a); t.removeClass("glyphicon-sort-by-attributes").addClass("glyphicon-sort-by-attributes-alt").addClass("active-filter").removeClass("glyphicon-sort") }, this.UpdateSortNumbers = function () { this.container.find("th").each(function () { var t = $(this).attr("data-filter"); void 0 !== t && !1 !== t && e.UpdateSortNumber($(this), t) }) }, this.UpdateSortNumber = function (t, i) { var a = e.GetSortIndex(i); null == a ? t.find(".sort-number").text("") : t.find(".sort-number").text(a + 1) }, this.LogSort = function () { for (var t = 0; t < this.activeSorts.length; t++)console.log(this.activeSorts[t]) }, this.AddSort = function (t, e) { var i = this.GetSortIndex(t); return null == i ? (this.activeSorts.unshift({ Field: t, Direction: 0, Type: e }), 0) : 1 == this.activeSorts[i].Direction ? (this.activeSorts.splice(i, 1), null) : (this.activeSorts[i].Direction = 1, 1) }, this.AddSortAsc = function (t, e) { var i = this.GetSortIndex(t); return null == i ? (this.activeSorts.unshift({ Field: t, Direction: 0, Type: e }), 0) : (this.activeSorts[i].Direction = 0, 1) }, this.AddSortDesc = function (t, e) { var i = this.GetSortIndex(t); null == i ? this.activeSorts.unshift({ Field: t, Direction: 1, Type: e }) : this.activeSorts[i].Direction = 1 }, this.GetSort = function (t) { var e = this.GetSortIndex(t); return null == e ? null : this.activeSorts[e] }, this.GetSortIndex = function (t) { for (var e = 0; e < this.activeSorts.length; e++)if (this.activeSorts[e].Field == t) return e; return null }, this.LoadFilter = function (t, i) { null != i && null != i.Filter && e.container.find("th").each(function () { var t = $(this).attr("data-filter"); if (null != i.Filter && i.Filter.length > 0) for (var a in i.Filter) if (t == i.Filter[a].Field) { var n = $(this).attr("data-filter-type"); e.SetFilter(t, JSON.parse(i.Filter[a].Data), n), null != e.filterTray && $(this).find(".glyphicon-filter").trigger("click").addClass("active-filter") } }) }, this.RemoveAllFilters = function () { e.container.find("th").each(function () { var t = $(this).attr("data-filter"); void 0 !== t && !1 !== t && ($(this).attr("data-dontclear") || (e.HideFilter(t), delete e.activeFilters[t])) }), e.LoadDefaultFilters(); for (var t in e.AdditionalFilters) e.AdditionalFilters[t].Container.attr("data-dontclear") || (e.HideFilter(e.AdditionalFilters[t].Field), delete e.activeFilters[e.AdditionalFilters[t].Field]); e.ClearFilters() }, this.ClearFilters = function () { e.container.find("th").each(function () { var t = $(this).attr("data-filter"); void 0 !== t && !1 !== t && ($(this).attr("data-dontclear") || e.ClearFilterValue(t)) }); for (var t in e.AdditionalFilters) e.AdditionalFilters[t].Container.attr("data-dontclear") || e.ClearFilterValue(e.AdditionalFilters[t].Field); e.ClearSort(), e.LoadDefaultSorts(), e.container.trigger("loadFilters") }, this.LoadDefaultFilters = function () { var t = 0 != e.columnTitles.length; this.container.find("th").each(function () { if (!t) { e.columnTitles.push($(this).find("div").clone().children().remove().end().text().trim()); var i = $(this).attr("data-hidden"); void 0 !== i && !1 !== i && e.HideColumn(e.columnTitles.length - 1) } var a = $(this).attr("data-filter"); if (void 0 !== a && !1 !== a) { var n = $(this).attr("data-filter-type"); if ($(this).attr("data-default-filter")) { var r = $(this).attr("data-default-filter"); try { r = JSON.parse(r) } catch (t) { } e.SetFilter(a, r, n), null != e.filterTray && $(this).find(".glyphicon-filter").trigger("click").addClass("active-filter") } else $(this).attr("data-show-filter") && null != e.filterTray && $(this).find(".glyphicon-filter").trigger("click") } }) }, this.SetFilters = function (t, i) { e.ImportFilterData(i.Data) }, this.ImportFilterData = function (t) { e.RemoveAllFilters(); for (var i in t.Filter) { var a = t.Filter[i], n = e.container.find("th[data-filter='" + a.Field + "']"), r = a.Data; try { r = JSON.parse(a.Data) } catch (t) { } e.SetFilter(a.Field, r, a.Type); var l = e.GetAdditionalFilter(a.Field); null != l && e.ShowAdditionalFilterWindow(l.Container, l.Display, l.Field, l.Type), null != e.filterTray && n.find(".glyphicon-filter").trigger("click").addClass("active-filter") } var s = t.Order.reverse(); e.ClearSort(); for (var i in s) { var o = s[i], d = (n = e.container.find("th[data-filter='" + o.Field + "']")).find(".glyphicon-sort"), c = n.attr("data-filter"), u = n.attr("data-filter-type"); 1 == o.Direction ? e.SortDesc(d, c, u) : e.SortAsc(d, c, u) } e.ShowAllColumns(), e.HiddenColumns = []; for (var i in t.HiddenColumns) e.HideColumn(t.HiddenColumns[i]); e.UpdateSortNumbers(), t.SetPage && (e.page = t.SetPage), e.UpdateResults() }, this.SetHiddenFilters = function (t, i) { e.ApplyHiddenFilters(i.filters) }, this.ApplyHiddenFilters = function (t) { Array.isArray(t) || (t = [t]), e.HiddenFilters = t, e.UpdateResults() }, this.BuildFilterWindow = function (t, i, a) { var n = null; null == this.filterWindows[i] && (this.filterWindows[i] = $("<div></div>").addClass("filter-window"), this.filterWindows[i].data("column", t).data("window", this.filterWindows[i]).data("field", i).data("type", a)), (n = this.filterWindows[i]).empty().removeClass("hide"); var r = $("<div>" + t.find("div").clone().children().remove().end().text() + "</div>").addClass("filter-header"); switch (null == e.filterTray && r.append($('<span class="glyphicon glyphicon-remove"></span>').on("click", function () { $(this).parent().parent().addClass("hide") })), n.append(r), null == e.filterTray && n.append($("<div></div>").addClass("clearfix")), a) { case "string": this.BuildStringFilter(i, n); break; case "bool": this.BuildBoolFilter(i, n); break; case "date": this.BuildDateFilter(i, n); break; case "list": this.BuildListFilter(t, i, n) }var l = $("<div></div>").addClass("filter-footer"); return null == e.filterTray ? (l.append($('<button type="button">Apply</button>').on("click", { column: t, window: n, field: i, type: a }, e.ApplyFilter)), t.attr("data-force-filter") || l.append($('<button type="button">Clear</button>').on("click", { column: t, window: n, field: i, type: a }, e.ClearFilter))) : t.attr("data-force-filter") || l.append($('<button type="button"><span class="glyphicon glyphicon-remove"></span></button>').on("click", { column: t, window: n, field: i, type: a }, e.ClearFilter)), n.append(l), n }, this.BuildListFilter = function (t, i, a) { var n = t.data("filter-items"), r = this.GetFilter(i); null == r && (r = ""); var l = $("<select></select>").addClass("filterable-focusable"); l.append($("<option></option>").prop("value", "").text("All")); for (var s in n) l.append($("<option></option>").prop("value", n[s].Value).text(n[s].Text)); a.append(l.val(r.Data).addClass("contains").attr("placeholder", "Contains")), l.on("change", function () { e.container.trigger("loadFilters") }) }, this.BuildStringFilter = function (t, i) { var a = this.GetFilter(t); null == a && (a = ""), i.append($('<input type="text" />').val(a.Data).addClass("contains").addClass("filterable-focusable").attr("placeholder", "Contains").on("keyup", function (t) { null != e.UpdateTimeout && clearTimeout(e.UpdateTimeout); var i = e; 13 === t.keyCode ? (i.container.trigger("loadFilters"), t.preventDefault(), t.stopPropagation(), t.stopImmediatePropagation()) : e.UpdateTimeout = setTimeout(function () { i.container.trigger("loadFilters") }, 800) }).on("keypress", function (t) { 13 === t.keyCode && (t.preventDefault(), t.stopPropagation(), t.stopImmediatePropagation()) })) }, this.BuildBoolFilter = function (t, i) { var a = this.GetFilter(t), n = $("<select></select>").addClass("boolFilter").addClass("filterable-focusable"), r = $('<option value="1">Yes</option>'), l = $('<option value="0">No</option>'); null != a && 0 == a.Data ? l.attr("selected", "1") : r.attr("selected", "1"), n.append(r), n.append(l), i.append(n), n.on("change", function () { e.container.trigger("loadFilters") }) }, this.GetDateRanges = function () { return { Today: [moment().startOf("day"), moment().add(1, "days").startOf("day")], Yesterday: [moment().subtract(1, "days").startOf("day"), moment().startOf("day")], "Last 7 Days": [moment().subtract(6, "days").startOf("day"), moment().startOf("day")], "Last 30 Days": [moment().subtract(29, "days").startOf("day"), moment().startOf("day")], "This Month": [moment().startOf("month"), moment().endOf("month")], "Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")] } }, this.GetDateRangeValue = function (t) { if (null == t || "" == t) return [null, null]; var i = e.GetDateRanges(); for (var a in i) if (t == a) return i[a]; var n = t.split(" - "); return [moment(n[0]), moment(n[1])] }, this.GetDateRangeText = function (t) { if (null == t || "" == t) return ""; var i = e.GetDateRanges(); for (var a in i) if (t == a) return a; return t }, this.BuildDateFilter = function (t, i) { var a = this.GetFilter(t); null == a && (a = { Data: { Start: "", End: "", Name: "" } }); var n = $("<div></div>").addClass("input-group"), r = e.GetDateRangeValue(a.Name); n.append($('<input type="text" />').addClass("filterable-focusable").val(e.GetDateRangeText(a.Data.Name)).addClass("starts fg-datepicker").attr("placeholder", "Date range")), i.append(n), n.daterangepicker({ startDate: r[0] || moment(), endDate: r[1] || moment(), timePicker: !0, ranges: e.GetDateRanges() }, function (t, i, a) { var r = ""; r = "Custom Range" == a ? t.format("MMMM D, YYYY") + " - " + i.format("MMMM D, YYYY") : a, n.find(".starts").val(r), e.container.trigger("loadFilters") }), n.find(".starts").change(function () { e.container.trigger("loadFilters") }) }, this.SetStringFilter = function (t, e) { this.SetFilter(t, e.find("input.contains").val(), "string") }, this.GetStringFilter = function (t, e) { return e.find("input.contains").val().trim() }, this.SetBoolFilter = function (t, e) { this.SetFilter(t, e.find("select").val(), "bool") }, this.GetBoolFilter = function (t, e) { return e.find("select").val() }, this.SetDateFilter = function (t, i) { this.SetFilter(t, e.GetDateFilter(t, i), "date") }, this.GetDateFilter = function (t, i) { var a = i.find(".starts").val(), n = e.GetDateRangeValue(a); return null == n[0] || null == n[1] ? { Start: "", End: "", Name: a } : { Start: n[0].format("YYYY-MM-DDTHH:mm:ss"), End: n[1].format("YYYY-MM-DDTHH:mm:ss"), Name: a } }, this.SetListFilter = function (t, e) { "" == e.find("select").val() ? this.SetFilter(t, null, "list") : this.SetFilter(t, [e.find("select").val()], "list") }, this.GetListFilter = function (t, e) { return null == e.find("select").val() ? "" : [e.find("select").val()] }, this.OpenFilterWindow = function () { var t = $(this); e.ShowFilterWindow(t) }, this.ShowFilterWindow = function (t) { e.ShowOptions(); var i = $(t).parent().parent().attr("data-filter"), a = $(t).parent().parent().attr("data-filter-type"); if (null == e.filterTray && e.filterWindows[i] && !e.filterWindows[i].hasClass("hide")) e.HideFilter(i); else { if (null == e.filterTray) for (var n in e.filterWindows) e.HideFilter(n); var r = e.BuildFilterWindow($(t).parent().parent(), i, a); null == e.filterTray ? $(t).parent().parent().append(r) : e.filterTray.append(r), e.Initialized && r.find(".filterable-focusable").focus() } }, this.ShowAdditionalFilterWindow = function (t, i, a, n) { var r = e.BuildAdditionalFilterWindow(t, i, a, n); e.filterTray.append(r) }, this.BuildAdditionalFilterWindow = function (t, i, a, n) { var r = null; null == this.filterWindows[a] && (this.filterWindows[a] = $("<div></div>").addClass("filter-window"), this.filterWindows[a].data("column", t).data("window", this.filterWindows[a]).data("field", a).data("type", n)), (r = this.filterWindows[a]).empty().removeClass("hide"); var l = $("<div>" + i + "</div>").addClass("filter-header"); switch (null == e.filterTray && l.append($('<span class="glyphicon glyphicon-remove"></span>').on("click", function () { $(this).parent().parent().addClass("hide") })), r.append(l), null == e.filterTray && r.append($("<div></div>").addClass("clearfix")), n) { case "string": this.BuildStringFilter(a, r); break; case "bool": this.BuildBoolFilter(a, r); break; case "date": this.BuildDateFilter(a, r); break; case "list": this.BuildListFilter(t, a, r) }var s = $("<div></div>").addClass("filter-footer"); return t.attr("data-force-filter") || s.append($('<button type="button"><span class="glyphicon glyphicon-remove"></span></button>').on("click", { column: t, window: r, field: a, type: n }, e.ClearFilter)), r.append(s), r }, this.ApplyAllFilters = function (t) { e.deferUpdate = !0; for (var i in e.filterWindows) { var a = e.filterWindows[i]; if (!a.hasClass("hidden") && !a.hasClass("hide")) { if (null == e.GetFilter(a.data("field")) && "" == e.GetFilterValue(a.data("type"), a.data("field"), a.data("window"))) continue; e.ApplyFilter({ data: { column: a.data("column"), window: a.data("window"), field: a.data("field"), type: a.data("type") } }) } } e.deferUpdate = !1, e.UpdateResults() }, this.ApplyFilter = function (t) { var i = t.data.column, a = t.data.field, n = t.data.type; i.find(".glyphicon-filter").addClass("active-filter"), e.SetFilterForType(a, n, t.data.window), this.newFilter = !0, null == e.filterTray && e.HideFilter(a), e.page = 1, e.deferUpdate || e.UpdateResults() }, this.ClearFilter = function (t) { var i = t.data.column; i.find(".glyphicon-filter").removeClass("active-filter"); var a = i.attr("data-filter"); e.activeFilters[a] && delete e.activeFilters[a], e.newFilter = !0, e.HideFilter(t.data.window), e.HideFilter(a), e.page = 1, e.UpdateResults() }, this.ClearFilterValue = function (t) { null != e.filterWindows[t] && (e.filterWindows[t].find("input").val(""), e.filterWindows[t].find("select").val("")) }, this.HideFilter = function (t) { null != e.filterWindows[t] && e.filterWindows[t].addClass("hide") }, this.GetFilterValue = function (t, e, i) { switch (t) { case "string": return this.GetStringFilter(e, i); case "bool": return this.GetBoolFilter(e, i); case "date": return this.GetDateFilter(e, i); case "list": return this.GetListFilter(e, i) } }, this.SetFilterForType = function (t, e, i) { switch (e) { case "string": this.SetStringFilter(t, i); break; case "bool": this.SetBoolFilter(t, i); break; case "date": this.SetDateFilter(t, i); break; case "list": this.SetListFilter(t, i) } }, this.SetFilter = function (t, e, i) { this.activeFilters[t] = { Data: e, Type: i } }, this.GetFilter = function (t) { return this.activeFilters[t] ? this.activeFilters[t] : null }, this.Initialize() }, $(document).ready(function () { $(".filterable").each(function () { new com.Eynon.FilterGrid($(this)) }) });